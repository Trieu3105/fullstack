"use client";

import { useState, useEffect } from "react";
import {
  Table,
  TableHeader,
  TableBody,
  TableRow,
  TableHead,
  TableCell,
  TableFooter,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Trash2 } from "lucide-react";
import { useUserContext } from "../context/context";
import { useRouter } from "next/navigation";

interface CartItem {
  id: number;
  name: string;
  price: number;
  quantity: number;
  images: string[];
}

export default function CartTable() {
  const { user, logout } = useUserContext();
  const router = useRouter();
  const [cart, setCart] = useState<CartItem[]>([]);
  const [customer, setCustomer] = useState({
    name: "",
    email: "",
    address: "",
  });
  const [paymentMethod, setPaymentMethod] = useState("momo");
  const userId = user?.id; // L·∫•y id_user t·ª´ th√¥ng tin ng∆∞·ªùi d√πng

  // üõí L·∫•y d·ªØ li·ªáu gi·ªè h√†ng t·ª´ API
  useEffect(() => {
    const fetchCartData = async () => {
      try {
        const response = await fetch(
          `${process.env.NEXT_PUBLIC_API_URL}/api/carts/${userId}`
        );
        const data = await response.json();
        console.log("D·ªØ li·ªáu gi·ªè h√†ng:", data);

        const parsedCart = data.cartItems.map((item: CartItem) => ({
          ...item,
          images:
            typeof item.images === "string"
              ? JSON.parse(item.images)
              : item.images,
        }));

        setCart(parsedCart || []);
      } catch (error) {
        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu gi·ªè h√†ng:", error);
      }
    };

    fetchCartData();
  }, [userId]);

  // üõ†Ô∏è C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
  const updateQuantity = (id: number, newQuantity: number) => {
    if (newQuantity < 1) {
      alert("S·ªë l∆∞·ª£ng kh√¥ng th·ªÉ nh·ªè h∆°n 1!");
      return;
    }
    setCart((prevCart) =>
      prevCart.map((item) =>
        item.id === id ? { ...item, quantity: newQuantity } : item
      )
    );
  };

  // ‚ùå X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
  const removeItem = async (id: number) => {
    try {
      setCart((prevCart) => prevCart.filter((item) => item.id !== id));
      await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/remove`, {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id_cart_item: id }),
      });
    } catch (error) {
      console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error);
      alert("Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i!");
    }
  };

  // üè∑Ô∏è T√≠nh t·ªïng ti·ªÅn
  const totalAmount = Array.isArray(cart)
    ? cart.reduce((total, item) => total + item.price * item.quantity, 0)
    : 0;

  // üõí X·ª≠ l√Ω c·∫≠p nh·∫≠t gi·ªè h√†ng
  const handleUpdateCart = async () => {
    try {
      const response = await fetch("${process.env.NEXT_PUBLIC_API_URL}/api/update", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ cartItems: cart }), // G·ª≠i to√†n b·ªô gi·ªè h√†ng l√™n API
      });

      const data = await response.json();
      if (response.ok) {
        alert(data.message || "Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");
      } else {
        alert(data.message || "L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng!");
      }
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng:", error);
      alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i!");
    }
  };
  // üõí X·ª≠ l√Ω thanh to√°n
  const handleCheckout = () => {
    router.push("/payments"); // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang thanh to√°n
  };

  if (!user) {
    return <p className="text-center py-10">ƒêang t·∫£i th√¥ng tin...</p>;
  }

  return (
    <div className="p-6 grid grid-cols-4 gap-6">
      {/* üõí Sidebar */}
      <div className="col-span-1 shadow-md p-6">
        <div className="p-4 flex flex-col items-center lg:items-start">
          <h2 className="text-lg font-semibold text-center lg:text-left">
            {user.full_name || user.username}
          </h2>
          <div className="mt-4 space-y-2 text-gray-700 w-full">
            <button className="w-full text-left hover:text-red-600 font-medium">
              Th√¥ng tin t√†i kho·∫£n
            </button>
            <button className="w-full text-left hover:text-red-600 font-medium">
              S·ªï ƒë·ªãa ch·ªâ
            </button>
            <button className="w-full text-left hover:text-red-600 font-medium">
              Qu·∫£n l√Ω ƒë∆°n h√†ng
            </button>
            <button className="w-full text-left hover:text-red-600 font-medium">
              S·∫£n ph·∫©m ƒë√£ xem
            </button>
            <button
              onClick={logout}
              className="w-full text-left text-red-600 font-medium"
            >
              ƒêƒÉng xu·∫•t
            </button>
          </div>
        </div>
      </div>

      {/* üõí B·∫£ng gi·ªè h√†ng */}
      <div className="container col-span-3 shadow-md rounded-lg p-6">
        <h2 className="text-4xl font-bold mb-4">üõí Gi·ªè h√†ng</h2>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>S·∫£n ph·∫©m</TableHead>
              <TableHead>Gi√°</TableHead>
              <TableHead>S·ªë l∆∞·ª£ng</TableHead>
              <TableHead>T·ªïng</TableHead>
              <TableHead>H√†nh ƒë·ªông</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {cart.map((item) => (
              <TableRow key={item.id}>
                <TableCell>
                  <div className="flex items-center gap-3">
                    <img
                      src={
                        item.images && item.images.length > 0
                          ? item.images[0]
                          : "/fallback-image.jpg"
                      }
                      alt={item.name}
                      className="w-12 h-12 rounded-md object-cover"
                    />
                    <span>{item.name}</span>
                  </div>
                </TableCell>
                <TableCell>
                  {Number(item.price).toLocaleString("vi-VN")} VNƒê
                </TableCell>
                <TableCell>
                  <input
                    type="number"
                    value={item.quantity}
                    onChange={(e) =>
                      updateQuantity(item.id, Number(e.target.value))
                    }
                    className="w-16 px-2 py-1 border rounded-md"
                  />
                </TableCell>
                <TableCell>
                  {Number(item.price * item.quantity).toLocaleString("vi-VN")}{" "}
                  VNƒê
                </TableCell>
                <TableCell>
                  <Button
                    variant="destructive"
                    size="icon"
                    onClick={() => removeItem(item.id)}
                  >
                    <Trash2 className="w-5 h-5" />
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
          <TableFooter>
            <TableRow>
              <TableCell colSpan={3} className="text-right font-medium">
                T·ªïng c·ªông
              </TableCell>
              <TableCell>
                {Number(totalAmount).toLocaleString("vi-VN")} VNƒê
              </TableCell>
              <TableCell></TableCell>
            </TableRow>
          </TableFooter>
        </Table>

        {/* N√∫t C·∫≠p nh·∫≠t gi·ªè h√†ng v√† Thanh to√°n */}
        <div className="flex justify-between mt-6">
          <Button
            className="bg-blue-600 text-white px-6 py-2 rounded-md"
            onClick={handleUpdateCart}
          >
            C·∫≠p nh·∫≠t gi·ªè h√†ng
          </Button>
          <Button
            className="bg-green-600 text-white px-6 py-2 rounded-md"
            onClick={handleCheckout}
          >
            Thanh to√°n
          </Button>
        </div>
      </div>
    </div>
  );
}
